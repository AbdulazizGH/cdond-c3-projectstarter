version: 2.1

commands:
  install_aws:
    steps:
      - run:
          name: "Install AWS CLI"
          command: |
            apk add --no-cache python py-pip
            pip install awscli
            aws --version
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          command: |
            aws cloudformation delete-stack --stack-name network-stack
            aws cloudformation delete-stack --stack-name backend-stack
            aws cloudformation delete-stack --stack-name cloudfront-stack
            aws cloudformation delete-stack --stack-name frontend-stack
          when: on_fail
  destroy_backend_frontend:
    steps:
      - run:
          name: Destroy environment
          command: |
            aws s3 rb s3://udapeople-websiteprod/ --force
            aws cloudformation delete-stack --stack-name frontend-stack
            aws cloudformation delete-stack --stack-name backend-stack
          when: on_fail  
  db_rollback:
    steps:
      - run:
          name: "DB Rollback"
          command: |
            cd backend
            npm install
            if 
              (( $( curl -H "token: e13a6cc4-3f08-4da7-9177-216b218d0341" --request GET https://api.memstash.io/values/migration_status ) == 0 )) ; \
            then 
              npm run migrations:revert
              echo "Reverting migrations"
            else
              echo "No migration to revert"
            fi
          when: on_fail
      - run:
          when: on_fail
          name: Prevents the workflow from continuing
          command: |
            circleci-agent step halt
jobs:
  hello-world: # Delete this job when you get started
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Say Hello
          command: |
            echo "Hello World"

  build-frontend:
      docker:
        - image: circleci/node
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: Build Frontend
            command: |
              cd frontend
              npm i
              npm run build
        - save_cache:
            paths: [frontend/node_modules]
            key: frontend-build

  build-backend:
      docker:
        - image: circleci/node
      steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Build Backend
            command: |
              cd backend
              npm i
              npm run build
        - save_cache:
            paths: [backend/node_modules]
            key: backend-build

  test-frontend:
      docker:
        - image: circleci/node
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: Test Frontend
            command: |
              cd frontend
              npm i
              npm run test
              
  test-backend:
      docker:
        - image: circleci/node
      steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Test Backend
            command: |
              cd backend
              npm i
              npm run test

  scan-frontend:
      docker:
        - image: circleci/node
      steps:
        - checkout
        - run:
            name: Audit Frontend
            command: |
              cd frontend
              npm i
              npm audit --audit-level=critical
  scan-backend:
      docker:
        - image: circleci/node
      steps:
        - checkout
        - run:
            name: Audit Backend
            command: |
              cd backend
              npm i
              npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - install_aws
      - run:
          name: Deploy Backend Infrastructure
          command: |
            cd .circleci/files
            aws cloudformation deploy \
            --template-file backend.yml \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  \
            --stack-name backend-stack
      - run:
          name: Deploy Frontend Infrastructure
          command: |
            cd .circleci/files
            aws cloudformation deploy \
            --template-file frontend.yml \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  \
            --stack-name frontend-stack
      - run:
          name: Add Backend EC2 Instance IP to inventory
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
    
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["3f:cc:80:fa:1c:cc:92:fe:03:fd:e8:7b:fc:c0:24:e9"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm
            pip install awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

#  run-migrations:

#  deploy-frontend:

#  deploy-backend:  

#  smoke-test:

#  cloudfront-update:

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      - deploy-infrastructure
          # requires:
          #   - test-frontend
          #   - test-backend
      - configure-infrastructure:
          requires: [deploy-infrastructure]